import { NextResponse } from "next/server";
import {
  GenerateContentRequest,
  GoogleGenerativeAI,
} from "@google/generative-ai";

/**
 * Initializes the Google Generative AI client using the API key from environment variables.
 * Ensure the GEMINI_API_KEY is set in your .env file.
 */
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || "");

/**
 * Handles POST requests to generate mathematical challenge problems using the Gemini AI model.
 * The request body must include a prompt, number of questions, topic, and difficulty level.
 * The response is returned in JSON format with the generated questions, options, and answers.
 *
 * @param req - The incoming HTTP request object.
 * @returns A NextResponse object containing the generated content or an error message.
 */
export async function POST(req: Request) {
  try {
    // Parse the request body to extract prompt, topic, and difficulty
    const requestData = await req.json();
    const { prompt, topic, difficulty } = requestData;

    // Validate that a prompt is provided
    if (!prompt) {
      return NextResponse.json(
        { error: "No prompt provided" },
        { status: 400 },
      );
    }

    /**
     * System instruction for the Gemini AI model.
     * Instructs the model to generate math quiz questions in strict JSON format.
     * Ensures LaTeX expressions are properly escaped for JSON compatibility.
     */
    const systemInstruction = `You are an expert at generating mathematical challenge problems.
    You need to generate math quiz questions, options, and the correct answers for them, and strictly adhere to the specified number of questions as requested by the user.
    Your response should be exclusively in JSON format.
    Follow the JSON format rigorously and avoid including any extraneous information or conversational elements outside of the structured JSON.
    Respond only with the JSON, without any introductory or concluding remarks.
    The user is asking for quiz questions on the topic of ${topic} at ${difficulty} difficulty level.
    Ensure that the questions, options are appropriate for this difficulty level.
    When including mathematical formulas or equations, use LaTeX format for clarity and precision.
    For example, a quadratic equation should be represented as ax^2 + bx + c = 0, and fractions should be represented using \\frac{numerator}{denominator}.

    Important Rules:
    1. Follow the structured JSON format strictly.
    2. Do not include $$ delimiters in the equation field. The equations should be valid LaTeX strings WITHOUT surrounding delimiters.
    3. Ensure all LaTeX expressions are properly escaped for JSON compatibility. For example, use \\frac{numerator}{denominator} instead of \frac{numerator}{denominator}.

    JSON structure must look like:
    {
      "questions": [
          {
              "id": 1,
              "questionText": "Solve for x: 2x + 3 = 7",  // Example problem statement
              "options": ["2", "3", "4", "5"],           // Numerical or formula options depending on the problem
              "answer": "2"                             // Correct answer in plain text, must match one of the options
          },
          // ... other questions following similar structures
      ]
    }`;

    // Initialize the Gemini AI model with the system instruction
    const model = genAI.getGenerativeModel({
      model: "gemini-2.0-flash-exp",
      systemInstruction,
    });

    // Construct the content generation request
    const generateContentRequest: GenerateContentRequest = {
      contents: [
        {
          role: "user",
          parts: [{ text: prompt }],
        },
      ],
    };

    // Generate content using the Gemini AI model
    const result = await model.generateContent(generateContentRequest);
    const generatedContent = result.response.text();

    /**
     * Removes Markdown code block syntax (e.g., ```json) from the generated content.
     * @param content - The raw content generated by the Gemini AI model.
     * @returns The content with Markdown code block syntax removed.
     */
    const removeMarkdownCodeBlocks = (content: string): string => {
      // Remove all occurrences of triple backticks with optional json keyword
      return content.replace(/```(json)?/g, "").trim();
    };

    /**
     * Escapes backslashes in LaTeX expressions to ensure JSON compatibility.
     * Replaces single backslashes (\) with double backslashes (\\).
     * @param content - The content to escape.
     * @returns The content with escaped backslashes.
     */
    const escapeLatexBackslashes = (content: string): string => {
      // Replace all single backslashes with double backslashes
      return content.replace(/\\/g, "\\\\");
    };

    // Clean and escape the generated content
    const cleanContent = removeMarkdownCodeBlocks(generatedContent);
    console.log("Cleaned content:", cleanContent);
    const escapedContent = escapeLatexBackslashes(cleanContent);
    console.log("Escaped content:", escapedContent);

    // Parse the escaped content as JSON
    const parsedContent = JSON.parse(escapedContent);

    // Return the parsed content as a JSON response
    return NextResponse.json({ generatedContent: parsedContent });
  } catch (error: unknown) {
    // Log the error for debugging
    console.error("Error:", error);

    // If the error is due to invalid JSON, log the problematic content
    if (error instanceof SyntaxError) {
      console.error("Invalid JSON content:", error.message);
    }

    // Return an error response
    return NextResponse.json(
      {
        error: "Failed to process request",
        message:
          error instanceof Error ? error.message : "Unknown error occurred",
      },
      { status: 500 },
    );
  }
}
